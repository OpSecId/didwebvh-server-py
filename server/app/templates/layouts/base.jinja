<!DOCTYPE html>
<html lang="en" data-bs-theme-base="slate" data-bs-theme-radius="0">

{% include 'components/head.jinja' %}

<body>
    <div class="page">
        {% include 'components/header.jinja' %}
        {% block page %}{% endblock %}
        {% include 'components/footer.jinja' %}
    </div>
    
    <!-- Loading Spinner for AJAX Navigation -->
    <div id="page-loader" style="display: none; position: fixed; top: 50%; left: 50%; transform: translate(-50%, -50%); z-index: 9999;">
        <div class="spinner-border text-primary" role="status" style="width: 3rem; height: 3rem;">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
    <div id="page-loader-overlay" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0, 0, 0, 0.1); z-index: 9998;"></div>
    
    <script src="https://cdn.jsdelivr.net/npm/@tabler/core@1.4.0/dist/js/tabler.min.js"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/list.js/2.3.1/list.min.js"></script>
    
    <!-- Smooth Explorer Navigation -->
    <script>
        // Intercept explorer navigation links for smooth transitions
        document.addEventListener('click', function(e) {
            const link = e.target.closest('a[href^="dids"], a[href^="credentials"], a[href^="resources"]');
            
            if (link && !link.target && !e.ctrlKey && !e.metaKey) {
                const href = link.getAttribute('href');
                
                // Debug logging
                console.log('Navigation intercepted:', href);
                
                // Only handle explorer pages (relative URLs)
                if (href && (href === 'dids' || href === 'credentials' || href === 'resources' || 
                             href.startsWith('dids?') || href.startsWith('credentials?') || href.startsWith('resources?'))) {
                    e.preventDefault();
                    console.log('Showing loading spinner...');
                    
                    const currentPath = window.location.pathname;
                    const basePath = currentPath.substring(0, currentPath.lastIndexOf('/') + 1);
                    const newUrl = basePath + href;
                    
                    // Show loading spinner
                    const loader = document.getElementById('page-loader');
                    const overlay = document.getElementById('page-loader-overlay');
                    const pageWrapper = document.querySelector('.page-wrapper');
                    
                    if (loader && overlay) {
                        loader.style.display = 'block';
                        overlay.style.display = 'block';
                    }
                    
                    if (pageWrapper) {
                        pageWrapper.style.opacity = '0.7';
                        pageWrapper.style.transition = 'opacity 0.3s';
                    }
                    
                    // Fetch new page
                    fetch(newUrl, {
                        headers: {
                            'Accept': 'text/html',
                            'X-Requested-With': 'XMLHttpRequest'
                        }
                    })
                    .then(response => response.text())
                    .then(html => {
                        const parser = new DOMParser();
                        const doc = parser.parseFromString(html, 'text/html');
                        
                        // Extract and replace ONLY the page wrapper (not the entire page)
                        const newPageWrapper = doc.querySelector('.page-wrapper');
                        if (newPageWrapper && pageWrapper) {
                            // Replace the entire element, not just innerHTML
                            pageWrapper.replaceWith(newPageWrapper);
                            
                            // Execute any scripts in the new content using eval to catch syntax errors
                            const newScripts = document.querySelector('.page-wrapper').querySelectorAll('script');
                            newScripts.forEach(oldScript => {
                                if (oldScript.src) {
                                    // External script - just recreate it
                                    const newScript = document.createElement('script');
                                    Array.from(oldScript.attributes).forEach(attr => {
                                        newScript.setAttribute(attr.name, attr.value);
                                    });
                                    oldScript.parentNode.replaceChild(newScript, oldScript);
                                } else {
                                    // Inline script - use eval to catch syntax errors
                                    try {
                                        eval(oldScript.textContent);
                                    } catch (e) {
                                        // Silently ignore redeclaration errors, log others
                                        if (!e.message.includes('already been declared')) {
                                            console.warn('Script execution warning:', e.message);
                                        }
                                    }
                                    // Remove the old script tag
                                    oldScript.remove();
                                }
                            });
                        }
                        
                        // Update URL
                        window.history.pushState({}, '', newUrl);
                        
                        // Scroll to top smoothly
                        window.scrollTo({ top: 0, behavior: 'smooth' });
                    })
                    .catch(error => {
                        console.error('Navigation error:', error);
                        // Fallback to normal navigation
                        window.location.href = newUrl;
                    })
                    .finally(() => {
                        // Hide loading spinner
                        if (loader && overlay) {
                            loader.style.display = 'none';
                            overlay.style.display = 'none';
                        }
                        
                        // Restore page opacity
                        const currentPageWrapper = document.querySelector('.page-wrapper');
                        if (currentPageWrapper) {
                            currentPageWrapper.style.opacity = '1';
                        }
                    });
                }
            }
        });
        
        // Handle browser back/forward buttons
        window.addEventListener('popstate', function(e) {
            window.location.reload();
        });
    </script>
</body>

</html>