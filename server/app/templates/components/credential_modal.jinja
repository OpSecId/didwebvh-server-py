<!-- Single Credential Detail Modal (Reusable) -->
<div class="modal modal-blur fade" id="credential-detail-modal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-xl modal-dialog-centered modal-dialog-scrollable" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="ti ti-certificate me-2"></i>Credential Details
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Credential Header Information -->
                <!-- Issuer Card -->
                <div class="card card-sm mb-3">
                    <div class="card-body py-2">
                        <div class="row align-items-center">
                            <div class="col-auto">
                                <span class="avatar avatar-md" id="header-issuer-avatar"></span>
                            </div>
                            <div class="col">
                                <div class="fw-bold" id="header-issuer-name">-</div>
                                <div class="text-muted small">
                                    <i class="ti ti-fingerprint me-1"></i>
                                    <span class="font-monospace" style="font-size: 0.7rem;" id="header-issuer-did">-</span>
                                </div>
                            </div>
                            <div class="col-auto">
                                <a href="#" id="header-issuer-link" target="_blank" class="btn btn-primary btn-sm">
                                    <i class="ti ti-external-link me-1"></i>Resolve
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Credential Info Card -->
                <div class="card card-sm mb-3">
                    <div class="card-body py-2">
                        <div class="row align-items-center mb-2">
                            <div class="col">
                                <div class="d-flex align-items-center">
                                    <span class="badge bg-primary text-white me-2" style="font-size: 0.875rem; font-weight: 500;" id="header-credential-type">
                                        <i class="ti ti-certificate me-1"></i><span id="header-type-text">-</span>
                                    </span>
                                    <span id="header-envelope-badge" style="display: none;">
                                        <i class="ti ti-mail-forward text-dark" style="font-size: 0.875rem;" title="Enveloped Credential (VC-JOSE)"></i>
                                    </span>
                                </div>
                            </div>
                            <div class="col-auto">
                                <div class="text-muted small text-end">
                                    <div><i class="ti ti-calendar-check me-1"></i><span id="header-valid-from">-</span></div>
                                    <div><i class="ti ti-calendar-x me-1"></i><span id="header-valid-until">-</span></div>
                                </div>
                            </div>
                        </div>
                        <div class="row align-items-center border-top pt-2">
                            <div class="col">
                                <div class="text-muted small mb-1">
                                    <i class="ti ti-link me-1"></i>Credential URL
                                </div>
                                <div class="font-monospace small text-truncate" id="header-credential-url-display" style="max-width: 500px;">-</div>
                            </div>
                            <div class="col-auto">
                                <div class="btn-list">
                                    <button class="btn btn-sm btn-outline-primary" type="button" onclick="copyCredentialUrl()">
                                        <i class="ti ti-copy me-1"></i>Copy
                                    </button>
                                    <a href="#" id="header-credential-url-link" target="_blank" class="btn btn-sm btn-outline-secondary">
                                        <i class="ti ti-external-link me-1"></i>Open
                                    </a>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Tabs -->
                <ul class="nav nav-tabs mb-3" role="tablist">
                    <li class="nav-item" role="presentation">
                        <button class="nav-link active" id="render-tab" data-bs-toggle="tab" data-bs-target="#render-content" type="button" role="tab">
                            <i class="ti ti-file-text me-1"></i>Render
                        </button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="security-tab" data-bs-toggle="tab" data-bs-target="#security-content" type="button" role="tab">
                            <i class="ti ti-lock me-1"></i>Security
                        </button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="json-tab" data-bs-toggle="tab" data-bs-target="#json-content" type="button" role="tab">
                            <i class="ti ti-code me-1"></i>Full JSON
                        </button>
                    </li>
                </ul>

                <!-- Tab Content -->
                <div class="tab-content" style="min-height: 500px; max-height: 600px; overflow-y: auto;">
                    <!-- Render Tab -->
                    <div class="tab-pane fade show active" id="render-content" role="tabpanel">
                        <div class="card">
                            <div class="card-body">
                                <div id="credential-render" style="line-height: 1.8;"></div>
                            </div>
                        </div>
                    </div>

                    <!-- Security Tab -->
                    <div class="tab-pane fade" id="security-content" role="tabpanel">
                        <div class="card">
                            <div class="card-body">
                                <h3 class="mb-3">
                                    <i class="ti ti-lock me-2"></i>Securing Mechanism
                                </h3>
                                
                                <!-- Proof Type -->
                                <div class="mb-4">
                                    <h4 class="mb-2">Proof Type</h4>
                                    <div id="security-proof-type" class="alert alert-info mb-0"></div>
                                </div>
                                
                                <!-- Proof Details -->
                                <div class="mb-3">
                                    <h5 class="mb-2 text-muted text-uppercase" style="font-size: 0.75rem; font-weight: 600; letter-spacing: 0.5px;">Proof Details</h5>
                                    <div id="security-proof-details"></div>
                                </div>
                                
                                <!-- Verification Method -->
                                <div class="mb-4">
                                    <h4 class="mb-2">Verification Method</h4>
                                    <div id="security-verification-method"></div>
                                </div>
                                
                                <!-- Credential Status -->
                                <div class="mb-3">
                                    <h5 class="mb-2 text-muted text-uppercase" style="font-size: 0.75rem; font-weight: 600; letter-spacing: 0.5px;">Credential Status</h5>
                                    <div id="security-credential-status"></div>
                                </div>
                                
                                <!-- Verification Status -->
                                <div>
                                    <h4 class="mb-2">Verification Status</h4>
                                    <div id="security-verification-status" class="alert alert-warning mb-0">
                                        <i class="ti ti-info-circle me-2"></i>
                                        Signature verification not yet implemented
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Full JSON Tab -->
                    <div class="tab-pane fade" id="json-content" role="tabpanel">
                        <div class="card">
                            <div class="card-header d-flex justify-content-between align-items-center">
                                <h3 class="card-title mb-0">
                                    <i class="ti ti-code me-2"></i>Full Credential JSON
                                </h3>
                                <button class="btn btn-sm btn-primary" type="button" onclick="copyCredentialJson()">
                                    <i class="ti ti-copy me-1"></i>Copy JSON
                                </button>
                            </div>
                            <div class="card-body">
                                <pre id="credential-json" class="bg-light p-3 rounded text-dark" style="max-height: 500px; overflow-y: auto; font-size: 0.8rem;"></pre>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn me-auto" data-bs-dismiss="modal">
                    <i class="ti ti-x me-1"></i>Close
                </button>
                <button type="button" class="btn btn-outline-primary" onclick="copyCredentialUrl()">
                    <i class="ti ti-link me-1"></i>Copy URL
                </button>
                <button type="button" class="btn btn-outline-success" onclick="downloadCredentialJson()">
                    <i class="ti ti-download me-1"></i>Download
                </button>
                <button type="button" class="btn btn-primary" onclick="copyCredentialJson()">
                    <i class="ti ti-copy me-1"></i>Copy JSON
                </button>
            </div>
        </div>
    </div>
</div>

<script>
    let currentCredentialJson = null;  // For display (decoded if enveloped)
    let currentCredentialOriginalJson = null;  // For download (always original)
    let currentCredentialUrl = null;
    let currentCredentialId = null;
    
    function decodeEnvelopedVC(credential) {
        // Check if this is an EnvelopedVerifiableCredential
        const types = credential.type || [];
        const typeArray = Array.isArray(types) ? types : [types];
        
        if (typeArray.includes('EnvelopedVerifiableCredential')) {
            try {
                // Extract JWT from data URL
                const dataUrl = credential.id || '';
                if (dataUrl.startsWith('data:')) {
                    const jwt = dataUrl.split(',')[1];
                    const parts = jwt.split('.');
                    
                    if (parts.length === 3) {
                        // Decode JWT payload (the actual credential)
                        const payload = parts[1];
                        // Add padding if needed
                        const paddedPayload = payload + '='.repeat((4 - payload.length % 4) % 4);
                        const decoded = JSON.parse(atob(paddedPayload.replace(/-/g, '+').replace(/_/g, '/')));
                        return decoded;
                    }
                }
            } catch (e) {
                console.error('Failed to decode EnvelopedVC:', e);
            }
        }
        
        return credential;
    }
    
    function prepareCredentialModal(button) {
        // Get data from button attributes
        const credentialIndex = button.getAttribute('data-credential-index');
        const credentialId = button.getAttribute('data-credential-id');
        const namespace = button.getAttribute('data-namespace');
        const alias = button.getAttribute('data-alias');
        
        // Get credential from pre-loaded data
        const credential = credentialsData[credentialIndex];
        const metadata = credentialsMetadata[credentialIndex];
        
        if (!credential) {
            console.error('Credential not found for index:', credentialIndex);
            return;
        }
        
        // Decode if it's an EnvelopedVerifiableCredential
        const decodedCredential = decodeEnvelopedVC(credential);
        
        // Store decoded JSON for display (without envelope if present)
        currentCredentialJson = JSON.stringify(decodedCredential, null, 2);
        document.getElementById('credential-json').textContent = currentCredentialJson;
        
        // Store original JSON for download (with envelope if present)
        currentCredentialOriginalJson = JSON.stringify(credential, null, 2);
        
        // Store credential ID for download
        currentCredentialId = credentialId;
        
        // Build and store HTTPS URL
        const protocol = window.location.protocol;
        const hostname = window.location.hostname;
        const port = window.location.port ? `:${window.location.port}` : '';
        currentCredentialUrl = `${protocol}//${hostname}${port}/${namespace}/${alias}/credentials/${credentialId}`;
        
        // Extract and display type
        const types = decodedCredential.type || [];
        const typeArray = Array.isArray(types) ? types : [types];
        const specificTypes = typeArray.filter(t => t !== 'VerifiableCredential');
        const displayType = specificTypes.length > 0 ? specificTypes.join(', ') : 'VerifiableCredential';
        
        // Check if enveloped
        const originalTypes = credential.type || [];
        const originalTypeArray = Array.isArray(originalTypes) ? originalTypes : [originalTypes];
        const isEnveloped = originalTypeArray.includes('EnvelopedVerifiableCredential');
        
        // Populate Header - Issuer
        if (decodedCredential.issuer) {
            const issuer = decodedCredential.issuer;
            let issuerDid = '';
            if (typeof issuer === 'object') {
                document.getElementById('header-issuer-name').textContent = issuer.name || (namespace && alias ? `${namespace.charAt(0).toUpperCase() + namespace.slice(1)} / ${alias.replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase())}` : 'Issuer');
                issuerDid = issuer.id || '';
                document.getElementById('header-issuer-did').textContent = issuerDid || '-';
                document.getElementById('header-issuer-link').href = `https://dev.uniresolver.io/#${issuerDid}`;
            } else {
                document.getElementById('header-issuer-name').textContent = namespace && alias ? `${namespace.charAt(0).toUpperCase() + namespace.slice(1)} / ${alias.replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase())}` : 'Issuer';
                issuerDid = issuer;
                document.getElementById('header-issuer-did').textContent = issuer;
                document.getElementById('header-issuer-link').href = `https://dev.uniresolver.io/#${issuer}`;
            }
            
            // Set avatar from backend-generated URL
            if (metadata && metadata.avatar) {
                document.getElementById('header-issuer-avatar').style.backgroundImage = `url(${metadata.avatar})`;
            }
        } else {
            document.getElementById('header-issuer-name').textContent = 'Issuer';
            document.getElementById('header-issuer-did').textContent = '-';
        }
        
        // Populate Header - Credential Info
        document.getElementById('header-type-text').textContent = displayType;
        document.getElementById('header-envelope-badge').style.display = isEnveloped ? 'inline' : 'none';
        document.getElementById('header-valid-from').textContent = decodedCredential.validFrom || 'Not specified';
        document.getElementById('header-valid-until').textContent = decodedCredential.validUntil || 'Not specified';
        
        // Populate Header - URL Link
        document.getElementById('header-credential-url-display').textContent = currentCredentialUrl;
        document.getElementById('header-credential-url-link').href = currentCredentialUrl;
        
        // Populate Security tab
        populateSecurityTab(credential, decodedCredential, isEnveloped, credentialIndex);
        
        // Populate Render tab - human-readable credential display
        renderCredential(decodedCredential);
        
        // Modal will be shown by data-bs-toggle attribute
    }
    
    function populateSecurityTab(credential, decodedCredential, isEnveloped, credentialIndex) {
        let proofTypeHtml = '';
        let proofDetailsHtml = '';
        let verificationMethodHtml = '';
        
        if (isEnveloped) {
            // EnvelopedVerifiableCredential (VC-JOSE/JWT)
            proofTypeHtml = '<i class="ti ti-mail-forward me-2"></i><strong>VC-JOSE (JSON Web Token)</strong><br><span class="text-muted">Credential is wrapped in a signed JWT envelope</span>';
            
            // Decode JWT to get header
            try {
                const dataUrl = credential.id || '';
                if (dataUrl.startsWith('data:')) {
                    const jwt = dataUrl.split(',')[1];
                    const parts = jwt.split('.');
                    
                    if (parts.length === 3) {
                        // Decode JWT header
                        const headerB64 = parts[0];
                        const paddedHeader = headerB64 + '='.repeat((4 - headerB64.length % 4) % 4);
                        const header = JSON.parse(atob(paddedHeader.replace(/-/g, '+').replace(/_/g, '/')));
                        
                        proofDetailsHtml += '<div class="d-flex flex-wrap gap-3 align-items-center">';
                        proofDetailsHtml += `<span class="badge bg-secondary-lt text-dark" style="font-size: 0.8rem;"><strong>Algorithm:</strong> ${header.alg || 'N/A'}</span>`;
                        proofDetailsHtml += `<span class="badge bg-secondary-lt text-dark" style="font-size: 0.8rem;"><strong>Type:</strong> ${header.typ || 'N/A'}</span>`;
                        proofDetailsHtml += '</div>';
                        proofDetailsHtml += `<div class="mt-2 text-muted small"><strong>Key ID:</strong> <span class="font-monospace">${header.kid || 'N/A'}</span></div>`;
                        
                        // Verification method from kid
                        if (header.kid) {
                            verificationMethodHtml += '<div class="card bg-light">';
                            verificationMethodHtml += '<div class="card-body">';
                            verificationMethodHtml += `<div class="mb-2"><strong>JsonWebKey</strong></div>`;
                            verificationMethodHtml += `<div class="font-monospace small text-break">${header.kid}</div>`;
                            verificationMethodHtml += '<div class="mt-3">';
                            verificationMethodHtml += `<a href="https://dev.uniresolver.io/#${header.kid.split('#')[0]}" target="_blank" class="btn btn-sm btn-primary">`;
                            verificationMethodHtml += '<i class="ti ti-external-link me-1"></i>Resolve Issuer DID</a>';
                            verificationMethodHtml += '</div>';
                            verificationMethodHtml += '</div>';
                            verificationMethodHtml += '</div>';
                        }
                    }
                }
            } catch (e) {
                proofDetailsHtml = `<div class="alert alert-danger">Error decoding JWT: ${e.message}</div>`;
            }
        } else {
            // Data Integrity Proof
            proofTypeHtml = '<i class="ti ti-lock me-2"></i><strong>Data Integrity Proof</strong><br><span class="text-muted">Credential uses embedded cryptographic proof</span>';
            
            if (decodedCredential.proof) {
                const proof = Array.isArray(decodedCredential.proof) ? decodedCredential.proof[0] : decodedCredential.proof;
                
                proofDetailsHtml += '<div class="d-flex flex-wrap gap-2 align-items-center mb-2">';
                if (proof.type) {
                    proofDetailsHtml += `<span class="badge bg-secondary-lt text-dark" style="font-size: 0.8rem;"><strong>Type:</strong> ${proof.type}</span>`;
                }
                if (proof.cryptosuite) {
                    proofDetailsHtml += `<span class="badge bg-secondary-lt text-dark" style="font-size: 0.8rem;"><strong>Cryptosuite:</strong> ${proof.cryptosuite}</span>`;
                }
                if (proof.proofPurpose) {
                    proofDetailsHtml += `<span class="badge bg-secondary-lt text-dark" style="font-size: 0.8rem;"><strong>Purpose:</strong> ${proof.proofPurpose}</span>`;
                }
                if (proof.created) {
                    proofDetailsHtml += `<span class="text-muted small"><strong>Created:</strong> ${new Date(proof.created).toLocaleString()}</span>`;
                }
                proofDetailsHtml += '</div>';
                if (proof.proofValue) {
                    proofDetailsHtml += `<div class="text-muted small mt-2"><strong>Proof Value:</strong><br><span class="font-monospace text-break" style="font-size: 0.7rem;">${proof.proofValue}</span></div>`;
                }
                
                // Verification method
                if (proof.verificationMethod) {
                    const vmType = proof.type || 'DataIntegrityProof';
                    verificationMethodHtml += '<div class="card bg-light">';
                    verificationMethodHtml += '<div class="card-body">';
                    verificationMethodHtml += `<div class="mb-2"><strong>${vmType}</strong></div>`;
                    verificationMethodHtml += `<div class="font-monospace small text-break">${proof.verificationMethod}</div>`;
                    verificationMethodHtml += '<div class="mt-3">';
                    verificationMethodHtml += `<a href="https://dev.uniresolver.io/#${proof.verificationMethod.split('#')[0]}" target="_blank" class="btn btn-sm btn-primary">`;
                    verificationMethodHtml += '<i class="ti ti-external-link me-1"></i>Resolve Issuer DID</a>';
                    verificationMethodHtml += '</div>';
                    verificationMethodHtml += '</div>';
                    verificationMethodHtml += '</div>';
                }
            } else {
                proofDetailsHtml = '<div class="alert alert-warning">No proof found in credential</div>';
            }
        }
        
        document.getElementById('security-proof-type').innerHTML = proofTypeHtml;
        document.getElementById('security-proof-details').innerHTML = proofDetailsHtml;
        document.getElementById('security-verification-method').innerHTML = verificationMethodHtml || '<div class="text-muted">No verification method specified</div>';
        
        // Populate verification status (from metadata)
        const metadata = credentialsMetadata[credentialIndex] || {};
        let verificationStatusHtml = '';
        if (metadata.verified) {
            verificationStatusHtml = '<div class="alert alert-success mb-0">';
            verificationStatusHtml += '<div class="d-flex align-items-center">';
            verificationStatusHtml += '<i class="ti ti-circle-check me-2 fs-3"></i>';
            verificationStatusHtml += '<div>';
            verificationStatusHtml += '<strong>Cryptographically Verified</strong><br>';
            verificationStatusHtml += `<span class="text-muted small">Verified using ${metadata.verification_method || 'unknown method'}</span>`;
            verificationStatusHtml += '</div>';
            verificationStatusHtml += '</div>';
            verificationStatusHtml += '</div>';
        } else {
            verificationStatusHtml = '<div class="alert alert-info mb-0">';
            verificationStatusHtml += '<i class="ti ti-info-circle me-2"></i>';
            verificationStatusHtml += 'Verification status unknown';
            verificationStatusHtml += '</div>';
        }
        document.getElementById('security-verification-status').innerHTML = verificationStatusHtml;
        
        // Populate credential status
        let statusHtml = '';
        if (decodedCredential.credentialStatus) {
            const status = decodedCredential.credentialStatus;
            statusHtml += '<div class="d-flex flex-wrap gap-2 align-items-center">';
            if (status.type) {
                statusHtml += `<span class="badge bg-secondary-lt text-dark" style="font-size: 0.8rem; font-weight: 500;">${status.type}</span>`;
            }
            if (status.statusPurpose) {
                statusHtml += `<span class="text-muted small"><strong>Purpose:</strong> ${status.statusPurpose}</span>`;
            }
            if (status.statusListIndex) {
                statusHtml += `<span class="text-muted small"><strong>Index:</strong> ${status.statusListIndex}</span>`;
            }
            statusHtml += '</div>';
            if (status.statusListCredential) {
                statusHtml += `<div class="mt-2"><a href="${status.statusListCredential}" target="_blank" class="small text-decoration-none"><i class="ti ti-external-link me-1"></i>View Status List</a></div>`;
            }
        } else {
            statusHtml = '<div class="text-muted small"><i class="ti ti-info-circle me-1"></i>No revocation status configured</div>';
        }
        document.getElementById('security-credential-status').innerHTML = statusHtml;
    }
    
    function renderCredential(credential) {
        console.log('Rendering credential:', credential);
        let renderHtml = '';
        
        // Credential header (more compact)
        const credTypes = credential.type || [];
        const credTypeArray = Array.isArray(credTypes) ? credTypes : [credTypes];
        const specificType = credTypeArray.find(t => t !== 'VerifiableCredential') || 'Verifiable Credential';
        const formattedType = specificType.replace(/([A-Z])/g, ' $1').trim();
        console.log('Rendering type:', formattedType);
        
        renderHtml += `<div class="mb-3">`;
        renderHtml += `<h3 class="mb-1">${formattedType}</h3>`;
        if (credential.name) {
            renderHtml += `<div class="text-muted">${credential.name}</div>`;
        }
        // Show validity inline with header
        if (credential.validFrom || credential.validUntil) {
            renderHtml += `<div class="text-muted small mt-1">`;
            if (credential.validFrom) {
                const validFromDate = new Date(credential.validFrom).toLocaleDateString();
                renderHtml += `<i class="ti ti-calendar-event me-1"></i>${validFromDate}`;
            }
            if (credential.validUntil) {
                const validUntilDate = new Date(credential.validUntil).toLocaleDateString();
                renderHtml += ` — <i class="ti ti-calendar-x me-1"></i>${validUntilDate}`;
            }
            renderHtml += `</div>`;
        }
        renderHtml += `</div>`;
        
        // Issuer section (compact)
        if (credential.issuer) {
            renderHtml += renderTopLevelCard('Issued By', credential.issuer, 'ti-user-check');
        }
        
        // Subject section - render each object property as a separate card
        if (credential.credentialSubject) {
            const subject = Array.isArray(credential.credentialSubject) 
                ? credential.credentialSubject[0] 
                : credential.credentialSubject;
            
            if (subject) {
                // First render basic subject info
                const basicInfo = {};
                const objectProperties = {};
                
                for (const [key, value] of Object.entries(subject)) {
                    if (typeof value === 'object' && value !== null && !Array.isArray(value)) {
                        objectProperties[key] = value;
                    } else if (!Array.isArray(value) && key !== 'type') {
                        basicInfo[key] = value;
                    }
                }
                
                // Render basic subject info using type names as card title
                if (Object.keys(basicInfo).length > 0) {
                    // Use credential subject types as card title
                    let cardTitle = 'Credential Subject';
                    if (subject.type) {
                        const types = Array.isArray(subject.type) ? subject.type : [subject.type];
                        const filteredTypes = types.filter(t => t !== 'VerifiableCredential');
                        if (filteredTypes.length > 0) {
                            // Join all types with comma and format
                            cardTitle = filteredTypes.map(t => t.replace(/([A-Z])/g, ' $1').trim()).join(', ');
                        }
                    }
                    renderHtml += renderTopLevelCard(cardTitle, basicInfo, 'ti-certificate');
                }
                
                // Render each object property as a separate card
                for (const [key, value] of Object.entries(objectProperties)) {
                    const displayKey = key.replace(/([A-Z])/g, ' $1').trim();
                    const capitalizedKey = displayKey.charAt(0).toUpperCase() + displayKey.slice(1);
                    renderHtml += renderTopLevelCard(capitalizedKey, value, 'ti-box');
                }
                
                // Render array properties as separate cards (skip type arrays)
                for (const [key, value] of Object.entries(subject)) {
                    if (Array.isArray(value) && key !== 'type') {
                        const displayKey = key.replace(/([A-Z])/g, ' $1').trim();
                        const capitalizedKey = displayKey.charAt(0).toUpperCase() + displayKey.slice(1);
                        renderHtml += renderTopLevelCard(capitalizedKey, value, 'ti-list');
                    }
                }
            }
        }
        
        console.log('Setting render HTML, length:', renderHtml.length);
        document.getElementById('credential-render').innerHTML = renderHtml;
        console.log('Render content set');
    }
    
    function renderTopLevelCard(title, data, icon = 'ti-info-circle') {
        if (!data) return '';
        
        let html = `<div class="mb-2">`;
        html += `<div class="card">`;
        html += `<div class="card-header py-2">`;
        html += `<h5 class="mb-0"><i class="ti ${icon} me-2"></i>${title}</h5>`;
        html += `</div>`;
        html += `<div class="card-body py-2">`;
        
        if (typeof data === 'object' && !Array.isArray(data)) {
            // Check for single nested property that should be flattened (facility, product, etc.)
            const keys = Object.keys(data).filter(k => k !== 'type');
            if (keys.length === 1 && typeof data[keys[0]] === 'object' && !Array.isArray(data[keys[0]])) {
                // Flatten - render the nested object's contents directly
                const nestedObj = data[keys[0]];
                html += renderObject(nestedObj, 0);
                
                // Also render any other properties at the parent level
                for (const [key, value] of Object.entries(data)) {
                    if (key === keys[0] || key === 'type') continue;
                    const displayKey = key.replace(/([A-Z])/g, ' $1').trim();
                    const capitalizedKey = displayKey.charAt(0).toUpperCase() + displayKey.slice(1);
                    html += `<div class="mb-1">`;
                    html += `<span class="text-muted small"><strong>${capitalizedKey}:</strong></span> `;
                    html += `<span>${value || '-'}</span>`;
                    html += `</div>`;
                }
            } else {
                html += renderObject(data, 0);
            }
        } else if (Array.isArray(data)) {
            html += renderArray(data);
        } else {
            html += `<div>${data}</div>`;
        }
        
        html += `</div></div></div>`;
        return html;
    }
    
    function renderObject(obj, depth = 0) {
        let html = '';
        const indent = depth > 0 ? 'ps-3' : '';
        
        // Check if this object only has 'type' (and nothing else meaningful)
        const keys = Object.keys(obj).filter(k => k !== 'type');
        if (keys.length === 0) {
            return ''; // Skip objects that only have type
        }
        
        // Check if this object has both name and id
        const hasName = obj.name;
        const hasId = obj.id;
        const isDid = hasId && obj.id.startsWith('did:');
        const isHttpUrl = hasId && (obj.id.startsWith('http://') || obj.id.startsWith('https://'));
        
        // Render name with optional DID resolver link
        if (hasName) {
            html += `<div class="mb-1 ${indent}">`;
            if (isHttpUrl) {
                // HTTP URL - make name a direct link
                html += `<a href="${obj.id}" target="_blank" class="text-decoration-none fw-bold">`;
                html += `${obj.name} <i class="ti ti-external-link ms-1"></i>`;
                html += `</a>`;
            } else if (isDid) {
                // DID - show name with UniResolver link icon
                html += `<span class="fw-bold">${obj.name}</span> `;
                html += `<a href="https://dev.uniresolver.io/#${obj.id}" target="_blank" class="text-muted" title="Resolve DID">`;
                html += `<i class="ti ti-world-www"></i>`;
                html += `</a>`;
            } else {
                // No URL or DID - just show name
                html += `<span class="fw-bold">${obj.name}</span>`;
            }
            html += `</div>`;
        }
        
        // Render verification status right after name (if present)
        if (obj.IDverifiedByCAB !== undefined) {
            html += `<div class="mb-1 ${indent}">`;
            if (obj.IDverifiedByCAB === true) {
                html += `<i class="ti ti-circle-check text-success me-1" title="ID Verified by CAB"></i><span class="text-muted small">Verified</span>`;
            } else {
                html += `<i class="ti ti-alert-triangle text-warning me-1" title="ID Not Verified by CAB"></i><span class="text-muted small">Not Verified</span>`;
            }
            html += `</div>`;
        }
        
        // Render description if present (without label, after verification)
        if (obj.description) {
            html += `<div class="mb-1 ${indent} text-muted">${obj.description}</div>`;
        }
        
        for (const [key, value] of Object.entries(obj)) {
            if (key === 'type') continue; // Skip type fields
            if (key === 'idScheme') continue; // Skip idScheme, we'll integrate it inline
            if (key === 'name') continue; // Already rendered above
            if (key === 'description') continue; // Already rendered above
            if (key === 'id') continue; // Don't show id field separately
            if (key === 'IDverifiedByCAB') continue; // Already rendered above
            
            const displayKey = key.replace(/([A-Z])/g, ' $1').trim();
            const capitalizedKey = displayKey.charAt(0).toUpperCase() + displayKey.slice(1);
            
            if (typeof value === 'object' && value !== null && !Array.isArray(value)) {
                // Check if this is a Link object (has linkURL, linkName)
                const isLinkObject = value.linkURL !== undefined;
                
                if (isLinkObject) {
                    // Render as a hyperlinked object with link type
                    html += `<div class="mb-2 ${indent}">`;
                    html += `<div class="text-muted small mb-1"><strong>${capitalizedKey}</strong></div>`;
                    html += `<div class="ps-2">`;
                    html += `<a href="${value.linkURL}" target="_blank" class="text-decoration-none fw-bold">`;
                    html += `${value.linkName || value.linkURL} <i class="ti ti-external-link ms-1"></i>`;
                    html += `</a>`;
                    if (value.linkType) {
                        html += `<div class="text-muted small mt-1">`;
                        html += `<i class="ti ti-tag me-1"></i>${value.linkType}`;
                        html += `</div>`;
                    }
                    html += `</div>`;
                    html += `</div>`;
                } else {
                    // Check if this is a conformity evidence/attestation reference (has URL id)
                    const isCredentialReference = value.id && isUrl(value.id) && value.id.includes('/credentials/');
                    
                    if (isCredentialReference) {
                    // Render as a clickable card linking to the credential in the explorer
                    const credId = value.id.split('/credentials/').pop();
                    const explorerUrl = `/explorer/credentials?credential_id=${encodeURIComponent(credId)}`;
                    
                    // Extract display info
                    let displayName = value.name;
                    if (!displayName && value.type) {
                        // Format type as display name if no name
                        const typeArray = Array.isArray(value.type) ? value.type : [value.type];
                        const specificType = typeArray.find(t => t !== 'VerifiableCredential') || typeArray[0];
                        displayName = specificType ? specificType.replace(/([A-Z])/g, ' $1').trim() : 'Referenced Credential';
                    }
                    if (!displayName) displayName = 'Referenced Credential';
                    
                    html += `<div class="mb-2 ${indent}">`;
                    html += `<a href="${explorerUrl}" class="text-decoration-none" target="_blank">`;
                    html += `<div class="card bg-primary-lt" style="border-left: 3px solid var(--tblr-primary); transition: all 0.2s;">`;
                    html += `<div class="card-body py-2" style="cursor: pointer;">`;
                    html += `<div class="d-flex align-items-center justify-content-between">`;
                    html += `<div class="flex-fill">`;
                    html += `<div class="text-muted small mb-1"><i class="ti ti-link me-1"></i>${capitalizedKey}</div>`;
                    html += `<div class="fw-bold text-dark">${displayName}</div>`;
                    if (value.description) {
                        html += `<div class="text-muted small mt-1">${value.description}</div>`;
                    }
                    html += `</div>`;
                    html += `<div class="ms-3">`;
                    html += `<i class="ti ti-arrow-right text-primary" style="font-size: 1.5rem;"></i>`;
                    html += `</div>`;
                    html += `</div>`;
                    html += `</div>`;
                    html += `</div>`;
                    html += `</a>`;
                    html += `</div>`;
                    } else {
                        // Generic nested object
                        html += `<div class="mb-2 ${indent}">`;
                        html += `<div class="border-start border-3 border-primary ps-3">`;
                        html += `<div class="text-muted small mb-1"><strong>${capitalizedKey}</strong></div>`;
                        html += renderObject(value, depth + 1);
                        html += `</div></div>`;
                    }
                }
            } else if (Array.isArray(value)) {
                // Array - render as list
                html += `<div class="mb-2 ${indent}">`;
                html += `<div class="text-muted small mb-1"><strong>${capitalizedKey}</strong></div>`;
                html += renderArray(value);
                html += `</div>`;
            } else {
                // Simple value - check if there's an associated idScheme
                html += `<div class="mb-1 ${indent}">`;
                
                // Special rendering for registeredId (no label)
                if (key === 'registeredId') {
                    html += `<div>`;
                    html += `<span class="font-monospace">${value || '-'}</span>`;
                    
                    // If there's an idScheme, show it inline
                    if (obj.idScheme) {
                        const schemeName = obj.idScheme.name || obj.idScheme.id || 'ID Scheme';
                        if (isUrl(obj.idScheme.id)) {
                            html += ` <a href="${obj.idScheme.id}" target="_blank" class="text-muted small text-decoration-none">(${schemeName} <i class="ti ti-external-link"></i>)</a>`;
                        } else {
                            html += ` <span class="text-muted small">(${schemeName})</span>`;
                        }
                    }
                    html += `</div>`;
                } else {
                    // Other fields - show label
                    html += `<span class="text-muted small"><strong>${capitalizedKey}:</strong></span> `;
                    
                    // If value is a URL, make it clickable
                    if (isUrl(value)) {
                        html += `<a href="${value}" target="_blank" class="text-decoration-none">${value} <i class="ti ti-external-link ms-1"></i></a>`;
                    } else {
                        html += `<span>${value || '-'}</span>`;
                    }
                }
                
                html += `</div>`;
            }
        }
        
        return html;
    }
    
    function isUrl(str) {
        if (!str || typeof str !== 'string') return false;
        return str.startsWith('http://') || str.startsWith('https://') || str.startsWith('did:');
    }
    
    function renderArray(arr) {
        let html = '';
        
        if (arr.length === 0) {
            return '<div class="text-muted small">Empty</div>';
        }
        
        // Check if array contains objects
        const hasObjects = arr.some(item => typeof item === 'object' && item !== null);
        
        if (hasObjects) {
            // Render each object as a sub-card
            arr.forEach((item, index) => {
                html += `<div class="card bg-light mb-2">`;
                html += `<div class="card-body">`;
                if (typeof item === 'object') {
                    html += renderObject(item, 0);
                } else {
                    html += `<div>${item}</div>`;
                }
                html += `</div></div>`;
            });
        } else {
            // Simple array - render as list
            html += '<ul class="mb-0">';
            arr.forEach(item => {
                html += `<li>${item}</li>`;
            });
            html += '</ul>';
        }
        
        return html;
    }
    
    function copyCredentialUrl() {
        if (currentCredentialUrl) {
            navigator.clipboard.writeText(currentCredentialUrl).then(function() {
                showToast('Copied!', 'Credential URL copied to clipboard');
            }).catch(function(err) {
                console.error('Failed to copy: ', err);
                showToast('Error', 'Failed to copy URL');
            });
        }
    }
    
    function copyCredentialJson() {
        if (currentCredentialJson) {
            navigator.clipboard.writeText(currentCredentialJson).then(function() {
                showToast('Copied!', 'Credential JSON copied to clipboard');
            }).catch(function(err) {
                console.error('Failed to copy: ', err);
                showToast('Error', 'Failed to copy JSON');
            });
        }
    }
    
    function downloadCredentialJson() {
        if (currentCredentialOriginalJson && currentCredentialId) {
            // Create a blob with the original JSON content (with envelope if present)
            const blob = new Blob([currentCredentialOriginalJson], { type: 'application/json' });
            const url = window.URL.createObjectURL(blob);
            
            // Create a temporary download link
            const a = document.createElement('a');
            a.href = url;
            a.download = `credential-${currentCredentialId}.json`;
            document.body.appendChild(a);
            a.click();
            
            // Clean up
            window.URL.revokeObjectURL(url);
            document.body.removeChild(a);
            
            showToast('Downloaded!', 'Credential downloaded successfully');
        }
    }

    function showToast(title, message) {
        const toast = document.createElement('div');
        toast.className = 'toast show position-fixed top-0 end-0 m-3';
        toast.style.zIndex = '9999';
        toast.innerHTML = `
            <div class="toast-header">
                <i class="ti ti-check text-success me-2"></i>
                <strong class="me-auto">${title}</strong>
                <button type="button" class="btn-close" data-bs-dismiss="toast"></button>
            </div>
            <div class="toast-body">
                ${message}
            </div>
        `;
        document.body.appendChild(toast);
        
        setTimeout(() => {
            if (toast.parentNode) {
                toast.parentNode.removeChild(toast);
            }
        }, 3000);
    }
</script>
