{% from 'macros/pagination.jinja' import render_pagination %}

<!-- Single Credential Detail Modal (Dynamically Loaded) -->
<div class="modal modal-blur fade" id="credential-detail-modal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-xl modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="ti ti-certificate me-2"></i>Credential Details
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Credential Details Content (populated by JavaScript) -->
                <div id="credential-detail-content">
                    <p class="text-center text-muted">Loading...</p>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="card">
    <div class="card-table">
        <form action="credentials" method="get">
            {% if pagination %}
            <div class="card-header position-relative">
                <div class="position-absolute top-0 end-0 p-3">
                    <div class="d-flex align-items-center">
                        <div class="me-3">
                            <div class="subheader">Page Size</div>
                            <div class="h2 mb-0">{{ pagination.limit }}</div>
                        </div>
                        <div class="dropdown">
                            <a class="dropdown-toggle text-secondary" href="#" data-bs-toggle="dropdown"
                                aria-expanded="false">
                                <svg xmlns="http://www.w3.org/2000/svg" class="icon" width="20" height="20"
                                    viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none"
                                    stroke-linecap="round" stroke-linejoin="round">
                                    <path stroke="none" d="M0 0h24v24H0z" fill="none" />
                                    <path d="M12 12m-1 0a1 1 0 1 0 2 0a1 1 0 1 0 -2 0" />
                                    <path d="M12 19m-1 0a1 1 0 1 0 2 0a1 1 0 1 0 -2 0" />
                                    <path d="M12 5m-1 0a1 1 0 1 0 2 0a1 1 0 1 0 -2 0" />
                                </svg>
                            </a>
                            <div class="dropdown-menu dropdown-menu-end">
                                <a class="dropdown-item" href="?limit=25">25 per page</a>
                                <a class="dropdown-item" href="?limit=50">50 per page</a>
                                <a class="dropdown-item" href="?limit=100">100 per page</a>
                                <a class="dropdown-item" href="?limit=200">200 per page</a>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row w-100">
                    <div class="col-4">
                        <div class="d-flex align-items-center">
                            <div class="subheader">Credentials Found</div>
                        </div>
                        <div class="d-flex align-items-baseline">
                            <div class="h2 mb-0">{{ pagination.total }}</div>
                        </div>
                    </div>
                </div>
            </div>
            {% endif %}
            <div class="card-header">
                <div class="row w-full">
                    <div class="col-2">
                        <div class="mb-2">
                            <label class="form-label form-label-sm">
                                Issuer Namespace
                            </label>
                            <input name="namespace" id="namespace" class="form-control form-control-sm" type="text"
                                placeholder="e.g. myns" value="{{ request.query_params.get('namespace', '') }}">
                        </div>
                        <div class="mb-2">
                            <label class="form-label form-label-sm">
                                Issuer Alias
                            </label>
                            <input name="alias" id="alias" class="form-control form-control-sm" type="text"
                                placeholder="e.g. myalias" value="{{ request.query_params.get('alias', '') }}">
                        </div>
                    </div>
                    <div class="col-2">
                        <div class="mb-2">
                            <label class="form-label form-label-sm">
                                Issuer DID
                            </label>
                            <input name="issuer_did" id="issuer_did" class="form-control form-control-sm" type="text"
                                placeholder="did:webvh:..." value="{{ request.query_params.get('issuer_did', '') }}">
                        </div>
                        <div class="mb-2">
                            <label class="form-label form-label-sm">
                                Issuer SCID
                            </label>
                            <input name="scid" id="scid" class="form-control form-control-sm" type="text"
                                placeholder="Enter SCID..." value="{{ request.query_params.get('scid', '') }}">
                        </div>
                    </div>
                    <div class="col-2">
                        <div class="mb-2">
                            <label class="form-label form-label-sm">
                                Subject ID
                            </label>
                            <input name="subject_id" id="subject_id" class="form-control form-control-sm" type="text"
                                placeholder="did:example:..." value="{{ request.query_params.get('subject_id', '') }}">
                        </div>
                        <div class="mb-2">
                            <label class="form-label form-label-sm">
                                Status
                            </label>
                            <select name="revoked" id="revoked" class="form-select form-select-sm">
                                <option value="">All Credentials</option>
                                <option value="false" {% if request.query_params.get('revoked')=='false' %}selected{%
                                    endif %}>Active Only</option>
                                <option value="true" {% if request.query_params.get('revoked')=='true' %}selected{%
                                    endif %}>Revoked Only</option>
                            </select>
                        </div>
                    </div>
                    <div class="col-2">
                        <div class="mb-2">
                            <label class="form-label form-label-sm">
                                Credential ID
                            </label>
                            <input name="credential_id" id="credential_id" class="form-control form-control-sm"
                                type="text" placeholder="e.g. 4koNPJbt"
                                value="{{ request.query_params.get('credential_id', '') }}">
                        </div>
                    </div>
                    <div class="col-2">
                        <!-- Empty column for spacing -->
                    </div>
                    <div class="col-2">
                        <h3 class="card-title mb-3">
                            <i class="ti ti-filter me-2"></i>Filter Credentials
                        </h3>
                        <button type="submit" class="btn btn-primary w-100 mb-2">
                            <i class="ti ti-search me-1"></i>Apply Filters
                        </button>
                        <button onclick="window.location.reload()" class="btn btn-outline-secondary w-100"
                            type="button">
                            <i class="ti ti-refresh me-1"></i>Refresh Table
                        </button>
                    </div>
                </div>
            </div>
        </form>
    </div>
    <div id="advanced-table">
        <div class="table-responsive" style="max-height: 600px; overflow-y: auto;">
            <table class="table table-vcenter table-selectable">
                <thead class="sticky-top"
                    style="background: linear-gradient(to bottom, #f8f9fa 0%, #e9ecef 100%); border-bottom: 2px solid #dee2e6;">
                    <tr>
                        <th class="text-muted text-uppercase"
                            style="font-size: 0.75rem; font-weight: 600; letter-spacing: 0.5px;">
                            <button
                                class="table-sort d-flex justify-content-between align-items-center w-100 border-0 bg-transparent text-muted"
                                data-sort="sort-issuer">
                                <span>Issuer</span>
                                <i class="ti ti-chevron-down ms-1"></i>
                            </button>
                        </th>
                        <th class="text-muted text-uppercase"
                            style="font-size: 0.75rem; font-weight: 600; letter-spacing: 0.5px;">
                            <button
                                class="table-sort d-flex justify-content-between align-items-center w-100 border-0 bg-transparent text-muted"
                                data-sort="sort-type">
                                <span>Credential Type</span>
                                <i class="ti ti-chevron-down ms-1"></i>
                            </button>
                        </th>
                        <th class="text-muted text-uppercase"
                            style="font-size: 0.75rem; font-weight: 600; letter-spacing: 0.5px;">
                            <button
                                class="table-sort d-flex justify-content-between align-items-center w-100 border-0 bg-transparent text-muted"
                                data-sort="sort-subject">
                                <span>Subject</span>
                                <i class="ti ti-chevron-down ms-1"></i>
                            </button>
                        </th>
                        <th class="text-muted text-uppercase"
                            style="font-size: 0.75rem; font-weight: 600; letter-spacing: 0.5px;">Validity</th>
                        <th class="w-1 text-muted text-uppercase"
                            style="font-size: 0.75rem; font-weight: 600; letter-spacing: 0.5px;">Actions</th>
                    </tr>
                </thead>
                <tbody class="table-tbody">
                    {% if results|length == 0 %}
                    <tr>
                        <td colspan="5" class="text-center py-5">
                            <div class="empty">
                                <div class="empty-icon">
                                    <i class="ti ti-id-badge-2 icon icon-lg"></i>
                                </div>
                                <p class="empty-title">No credentials found</p>
                                <p class="empty-subtitle text-secondary">
                                    Try adjusting your filters or publish new credentials
                                </p>
                            </div>
                        </td>
                    </tr>
                    {% else %}
                    {% for credential in results %}
                    <tr>
                        <td class="sort-issuer">
                            <div class="d-flex align-items-center justify-content-between" style="font-size: 0.875rem;">
                                <div class="d-flex align-items-center">
                                    <span class="avatar avatar-sm me-2"
                                        style="background-image: url({{ credential.avatar }})"></span>
                                    <div style="max-width: 200px;">
                                        <div class="text-truncate" title="{{ credential.issuer_did }}">
                                            {% if credential.namespace and credential.alias %}
                                            <strong>{{ credential.namespace | title }} / {{ credential.alias |
                                                replace('-', ' ') | title }}</strong>
                                            {% else %}
                                            <strong>{{ credential.issuer_did }}</strong>
                                            {% endif %}
                                        </div>
                                        <div class="text-muted text-truncate" style="font-size: 0.7rem;">
                                            {{ credential.scid }}
                                        </div>
                                    </div>
                                </div>
                                <span class="badge badge-sm bg-secondary-lt ms-2" style="font-size: 0.65rem;">{{
                                    credential.did_method }}</span>
                            </div>
                        </td>
                        <td class="sort-type">
                            <div class="d-flex align-items-center" style="font-size: 0.875rem;">
                                <i class="ti ti-certificate me-2 text-muted"></i>
                                <div>
                                    <div>{{ credential.credential_type }}</div>
                                    <div class="text-muted" style="font-size: 0.7rem;">
                                        {% if credential.verifiable_credential.type and 'EnvelopedVerifiableCredential'
                                        in credential.verifiable_credential.type %}
                                        <i class="ti ti-mail-forward me-1"></i>Enveloped
                                        {% else %}
                                        <i class="ti ti-lock me-1"></i>Data Integrity Proof
                                        {% endif %}
                                    </div>
                                </div>
                            </div>
                        </td>
                        <td class="sort-subject">
                            {% if credential.subject_name %}
                            <div class="text-truncate" style="max-width: 180px; font-size: 0.875rem;"
                                title="{{ credential.subject_id }}">
                                <i class="ti ti-user me-1 text-muted"></i>
                                <strong>{{ credential.subject_name }}</strong>
                            </div>
                            {% elif credential.subject_type %}
                            <div class="text-truncate" style="max-width: 180px; font-size: 0.875rem;">
                                <i class="ti ti-tag me-1 text-muted"></i>
                                <span class="text-muted">{{ credential.subject_type | regex_replace('([A-Z])', ' \\1') |
                                    trim }}</span>
                            </div>
                            {% else %}
                            <div class="text-muted" style="font-size: 0.875rem;">
                                <i class="ti ti-user me-1"></i>-
                            </div>
                            {% endif %}
                        </td>
                        <td>
                            <div style="font-size: 0.75rem;">
                                {% if credential.valid_from %}
                                <div class="text-muted">
                                    <i class="ti ti-calendar-event me-1"></i>From: {{ credential.valid_from }}
                                </div>
                                {% endif %}
                                {% if credential.valid_until %}
                                <div class="text-muted">
                                    <i class="ti ti-calendar-x me-1"></i>Until: {{ credential.valid_until }}
                                </div>
                                {% endif %}
                            </div>
                        </td>
                        <td>
                            <div class="d-flex justify-content-end gap-2">
                                <button type="button" class="btn btn-sm btn-outline-primary rounded-pill"
                                    data-bs-toggle="modal" data-bs-target="#credential-detail-modal"
                                    data-credential-index="{{ loop.index }}"
                                    data-credential-id="{{ credential.credential_id }}"
                                    data-namespace="{{ credential.namespace }}" data-alias="{{ credential.alias }}"
                                    onclick="prepareCredentialModal(this)" title="View Details">
                                    <i class="ti ti-eye me-1"></i>View
                                </button>
                            </div>
                        </td>
                    </tr>
                    {% endfor %}
                    {% endif %}
                </tbody>
            </table>
        </div>
        {{ render_pagination(pagination, request) }}
    </div>
</div>

<script>
    // Store credentials data in JavaScript
    window.credentialsData = {
        {% for credential in results %}
        {{ loop.index }}: {{ credential.verifiable_credential | tojson }}{% if not loop.last %},{% endif %}
        {% endfor %}
    };

    // Store credential metadata (avatar, namespace, alias, verification)
    window.credentialsMetadata = {
        {% for credential in results %}
        {{ loop.index }}: {
            avatar: "{{ credential.avatar }}",
            namespace: "{{ credential.namespace }}",
            alias: "{{ credential.alias }}",
            verified: {{ 'true' if credential.verified else 'false' }},
        verification_method: "{{ credential.verification_method or '' }}"
    } {% if not loop.last %}, {% endif %}
    {% endfor %}
    };

{% raw %}
    // Initialize current credential state
    window.currentCredentialJson = null;  // For display (decoded if enveloped)
    window.currentCredentialOriginalJson = null;  // For download (always original)
    window.currentCredentialUrl = null;
    window.currentCredentialId = null;
    
    window.decodeEnvelopedVC = function(credential) {
        // Check if this is an EnvelopedVerifiableCredential
        const types = credential.type || [];
        const typeArray = Array.isArray(types) ? types : [types];
        
        if (typeArray.includes('EnvelopedVerifiableCredential')) {
            try {
                // Extract JWT from data URL
                const dataUrl = credential.id || '';
                if (dataUrl.startsWith('data:')) {
                    const jwt = dataUrl.split(',')[1];
                    const parts = jwt.split('.');
                    
                    if (parts.length === 3) {
                        // Decode JWT payload (the actual credential)
                        const payload = parts[1];
                        // Add padding if needed
                        const paddedPayload = payload + '='.repeat((4 - payload.length % 4) % 4);
                        const decoded = JSON.parse(atob(paddedPayload.replace(/-/g, '+').replace(/_/g, '/')));
                        return decoded;
                    }
                }
            } catch (e) {
                console.error('Failed to decode EnvelopedVC:', e);
            }
        }
        
        return credential;
    }
    
    window.prepareCredentialModal = function(button) {
        // Get data from button attributes
        const credentialIndex = button.getAttribute('data-credential-index');
        const credentialId = button.getAttribute('data-credential-id');
        const namespace = button.getAttribute('data-namespace');
        const alias = button.getAttribute('data-alias');
        
        // Get credential from pre-loaded data
        const credential = window.credentialsData[credentialIndex];
        const metadata = window.credentialsMetadata[credentialIndex];
        
        if (!credential) {
            console.error('Credential not found for index:', credentialIndex);
            return;
        }
        
        // Decode if it's an EnvelopedVerifiableCredential
        const decodedCredential = decodeEnvelopedVC(credential);
        
        // Build credential detail content dynamically
        const content = buildCredentialDetailContent(credential, decodedCredential, metadata, credentialId, namespace, alias, credentialIndex);
        document.getElementById('credential-detail-content').innerHTML = content;
        
        // Modal will be shown by data-bs-toggle attribute
    }
    
    function buildCredentialDetailContent(credential, decodedCredential, metadata, credentialId, namespace, alias, credentialIndex) {
        // Extract simple credential ID if it's a URL
        let simpleCredentialId = credentialId;
        if (credentialId.startsWith('http://') || credentialId.startsWith('https://')) {
            simpleCredentialId = credentialId.split('/credentials/').pop() || credentialId;
        } else if (credentialId.startsWith('data:')) {
            simpleCredentialId = credentialId;
        }
        
        // Store credential data
        window.currentCredentialId = simpleCredentialId;
        window.currentCredentialJson = JSON.stringify(decodedCredential, null, 2);
        window.currentCredentialOriginalJson = JSON.stringify(credential, null, 2);
        
        // Build URL
        const protocol = window.location.protocol;
        const hostname = window.location.hostname;
        const port = window.location.port ? `:${window.location.port}` : '';
        window.currentCredentialUrl = `${protocol}//${hostname}${port}/${namespace}/${alias}/credentials/${encodeURIComponent(simpleCredentialId)}`;
        
        // Extract and display type
        const types = decodedCredential.type || [];
        const typeArray = Array.isArray(types) ? types : [types];
        const specificTypes = typeArray.filter(t => t !== 'VerifiableCredential');
        const displayType = specificTypes.length > 0 ? specificTypes.join(', ') : 'VerifiableCredential';
        
        // Check if enveloped
        const originalTypes = credential.type || [];
        const originalTypeArray = Array.isArray(originalTypes) ? originalTypes : [originalTypes];
        const isEnveloped = originalTypeArray.includes('EnvelopedVerifiableCredential');
        
        // Build issuer info
        let issuerName = 'Issuer';
        let issuerDid = '-';
        let issuerLink = '#';
        if (decodedCredential.issuer) {
            const issuer = decodedCredential.issuer;
            if (typeof issuer === 'object') {
                issuerName = issuer.name || (namespace && alias ? `${namespace.charAt(0).toUpperCase() + namespace.slice(1)} / ${alias.replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase())}` : 'Issuer');
                issuerDid = issuer.id || '';
                issuerLink = `https://dev.uniresolver.io/#${issuerDid}`;
            } else {
                issuerName = namespace && alias ? `${namespace.charAt(0).toUpperCase() + namespace.slice(1)} / ${alias.replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase())}` : 'Issuer';
                issuerDid = issuer;
                issuerLink = `https://dev.uniresolver.io/#${issuer}`;
            }
        }
        
        const avatarStyle = metadata && metadata.avatar ? `style="background-image: url(${metadata.avatar});"` : '';
        
        // Build HTML
        let html = '';
        
        // Header - Issuer Card
        html += '<div class="card card-sm mb-3"><div class="card-body py-2"><div class="row align-items-center">';
        html += `<div class="col-auto"><span class="avatar avatar-md" ${avatarStyle}></span></div>`;
        html += '<div class="col">';
        html += `<div class="fw-bold">${issuerName}</div>`;
        html += `<div class="text-muted small"><i class="ti ti-fingerprint me-1"></i><span class="font-monospace" style="font-size: 0.7rem;">${issuerDid}</span></div>`;
        html += '</div>';
        html += `<div class="col-auto"><a href="${issuerLink}" target="_blank" class="btn btn-primary btn-sm"><i class="ti ti-external-link me-1"></i>Resolve</a></div>`;
        html += '</div></div></div>';
        
        // Header - Credential Info
        html += '<div class="card card-sm mb-3"><div class="card-body py-2">';
        html += `<div class="mb-2"><span class="text-muted small">Type:</span> <strong>${displayType}</strong> `;
        if (isEnveloped) {
            html += '<span class="badge bg-cyan-lt ms-2"><i class="ti ti-mail-forward me-1"></i>Enveloped</span>';
        }
        html += '</div>';
        html += `<div class="row"><div class="col"><span class="text-muted small">Valid From:</span> ${decodedCredential.validFrom || 'Not specified'}</div>`;
        html += `<div class="col"><span class="text-muted small">Valid Until:</span> ${decodedCredential.validUntil || 'Not specified'}</div></div>`;
        html += '</div></div>';
        
        // Header - URL
        html += '<div class="card card-sm mb-3"><div class="card-body py-2 d-flex align-items-center justify-content-between">';
        html += `<div class="small text-break"><i class="ti ti-link me-2"></i><a href="${window.currentCredentialUrl}" target="_blank" class="text-decoration-none">${window.currentCredentialUrl}</a></div>`;
        html += '<button type="button" class="btn btn-sm btn-outline-primary" onclick="copyCredentialUrl()"><i class="ti ti-copy"></i></button>';
        html += '</div></div>';
        
        // Tabs
        html += '<ul class="nav nav-tabs mb-3" role="tablist">';
        html += '<li class="nav-item"><a class="nav-link active" data-bs-toggle="tab" href="#cred-render-tab">Render</a></li>';
        html += '<li class="nav-item"><a class="nav-link" data-bs-toggle="tab" href="#cred-security-tab">Security</a></li>';
        html += '<li class="nav-item"><a class="nav-link" data-bs-toggle="tab" href="#cred-json-tab">JSON</a></li>';
        html += '</ul>';
        
        html += '<div class="tab-content">';
        
        // Render Tab
        html += '<div class="tab-pane fade show active" id="cred-render-tab" style="min-height: 400px; max-height: 600px; overflow-y: auto;">';
        html += renderCredential(decodedCredential);
        html += '</div>';
        
        // Security Tab
        html += '<div class="tab-pane fade" id="cred-security-tab" style="min-height: 400px; max-height: 600px; overflow-y: auto;">';
        html += buildSecurityTab(credential, decodedCredential, isEnveloped, metadata);
        html += '</div>';
        
        // JSON Tab
        html += '<div class="tab-pane fade" id="cred-json-tab" style="min-height: 400px; max-height: 600px; overflow-y: auto;">';
        html += `<pre class="bg-light p-3 rounded" style="color: #333;"><code>${JSON.stringify(decodedCredential, null, 2)}</code></pre>`;
        html += '<div class="mt-3">';
        html += '<button type="button" class="btn btn-primary me-2" onclick="copyCredentialJson()"><i class="ti ti-copy me-1"></i>Copy JSON</button>';
        html += '<button type="button" class="btn btn-primary" onclick="downloadCredentialJson()"><i class="ti ti-download me-1"></i>Download</button>';
        html += '</div>';
        html += '</div>';
        
        html += '</div>';
        
        return html;
    }
    
    function buildSecurityTab(credential, decodedCredential, isEnveloped, metadata) {
        let html = '<div class="row g-3">';
        
        // Proof Type
        html += '<div class="col-12"><div class="card"><div class="card-header"><h5 class="mb-0">Proof Type</h5></div><div class="card-body">';
        if (isEnveloped) {
            html += '<i class="ti ti-mail-forward me-2"></i><strong>VC-JOSE (JSON Web Token)</strong><br><span class="text-muted">Credential is wrapped in a signed JWT envelope</span>';
        } else {
            html += '<i class="ti ti-lock me-2"></i><strong>Data Integrity Proof</strong><br><span class="text-muted">Credential uses embedded cryptographic proof</span>';
        }
        html += '</div></div></div>';
        
        // Proof Details
        html += '<div class="col-12"><div class="card"><div class="card-header"><h5 class="mb-0">Proof Details</h5></div><div class="card-body">';
        html += buildProofDetails(credential, decodedCredential, isEnveloped);
        html += '</div></div></div>';
        
        // Verification Method
        html += '<div class="col-12"><div class="card"><div class="card-header"><h5 class="mb-0">Verification Method</h5></div><div class="card-body">';
        html += buildVerificationMethod(credential, decodedCredential, isEnveloped);
        html += '</div></div></div>';
        
        // Verification Status
        html += '<div class="col-12"><div class="card"><div class="card-header"><h5 class="mb-0">Verification Status</h5></div><div class="card-body">';
        if (metadata.verified) {
            html += '<div class="alert alert-success mb-0"><div class="d-flex align-items-center"><i class="ti ti-circle-check me-2 fs-3"></i><div>';
            html += '<strong>Cryptographically Verified</strong><br>';
            html += `<span class="text-muted small">Verified using ${metadata.verification_method || 'unknown method'}</span>`;
            html += '</div></div></div>';
        } else {
            html += '<div class="alert alert-info mb-0"><i class="ti ti-info-circle me-2"></i>Verification status unknown</div>';
        }
        html += '</div></div></div>';
        
        // Credential Status
        html += '<div class="col-12"><div class="card"><div class="card-header"><h5 class="mb-0">Credential Status</h5></div><div class="card-body">';
        if (decodedCredential.credentialStatus) {
            const status = decodedCredential.credentialStatus;
            html += '<div class="d-flex flex-wrap gap-2 align-items-center">';
            if (status.type) html += `<span class="badge bg-secondary-lt text-dark" style="font-size: 0.8rem; font-weight: 500;">${status.type}</span>`;
            if (status.statusPurpose) html += `<span class="text-muted small"><strong>Purpose:</strong> ${status.statusPurpose}</span>`;
            if (status.statusListIndex) html += `<span class="text-muted small"><strong>Index:</strong> ${status.statusListIndex}</span>`;
            html += '</div>';
            if (status.statusListCredential) html += `<div class="mt-2"><a href="${status.statusListCredential}" target="_blank" class="small text-decoration-none"><i class="ti ti-external-link me-1"></i>View Status List</a></div>`;
        } else {
            html += '<div class="text-muted small"><i class="ti ti-info-circle me-1"></i>No revocation status configured</div>';
        }
        html += '</div></div></div>';
        
        html += '</div>';
        return html;
    }
    
    function buildProofDetails(credential, decodedCredential, isEnveloped) {
        let html = '';
        
        if (isEnveloped) {
            try {
                const dataUrl = credential.id || '';
                if (dataUrl.startsWith('data:')) {
                    const jwt = dataUrl.split(',')[1];
                    const parts = jwt.split('.');
                    
                    if (parts.length === 3) {
                        const headerB64 = parts[0];
                        const paddedHeader = headerB64 + '='.repeat((4 - headerB64.length % 4) % 4);
                        const header = JSON.parse(atob(paddedHeader.replace(/-/g, '+').replace(/_/g, '/')));
                        
                        html += '<div class="d-flex flex-wrap gap-3 align-items-center">';
                        html += `<span class="badge bg-secondary-lt text-dark" style="font-size: 0.8rem;"><strong>Algorithm:</strong> ${header.alg || 'N/A'}</span>`;
                        html += `<span class="badge bg-secondary-lt text-dark" style="font-size: 0.8rem;"><strong>Type:</strong> ${header.typ || 'N/A'}</span>`;
                        html += '</div>';
                        html += `<div class="mt-2 text-muted small"><strong>Key ID:</strong> <span class="font-monospace">${header.kid || 'N/A'}</span></div>`;
                    }
                }
            } catch (e) {
                html = `<div class="alert alert-danger">Error decoding JWT: ${e.message}</div>`;
            }
        } else {
            if (decodedCredential.proof) {
                const proof = Array.isArray(decodedCredential.proof) ? decodedCredential.proof[0] : decodedCredential.proof;
                
                html += '<div class="d-flex flex-wrap gap-2 align-items-center mb-2">';
                if (proof.type) html += `<span class="badge bg-secondary-lt text-dark" style="font-size: 0.8rem;"><strong>Type:</strong> ${proof.type}</span>`;
                if (proof.cryptosuite) html += `<span class="badge bg-secondary-lt text-dark" style="font-size: 0.8rem;"><strong>Cryptosuite:</strong> ${proof.cryptosuite}</span>`;
                if (proof.proofPurpose) html += `<span class="badge bg-secondary-lt text-dark" style="font-size: 0.8rem;"><strong>Purpose:</strong> ${proof.proofPurpose}</span>`;
                if (proof.created) html += `<span class="text-muted small"><strong>Created:</strong> ${new Date(proof.created).toLocaleString()}</span>`;
                html += '</div>';
                if (proof.proofValue) html += `<div class="text-muted small mt-2"><strong>Proof Value:</strong><br><span class="font-monospace text-break" style="font-size: 0.7rem;">${proof.proofValue}</span></div>`;
            } else {
                html = '<div class="alert alert-warning">No proof found in credential</div>';
            }
        }
        
        return html;
    }
    
    function buildVerificationMethod(credential, decodedCredential, isEnveloped) {
        let html = '';
        
        if (isEnveloped) {
            try {
                const dataUrl = credential.id || '';
                if (dataUrl.startsWith('data:')) {
                    const jwt = dataUrl.split(',')[1];
                    const parts = jwt.split('.');
                    
                    if (parts.length === 3) {
                        const headerB64 = parts[0];
                        const paddedHeader = headerB64 + '='.repeat((4 - headerB64.length % 4) % 4);
                        const header = JSON.parse(atob(paddedHeader.replace(/-/g, '+').replace(/_/g, '/')));
                        
                        if (header.kid) {
                            html += '<div class="card bg-light"><div class="card-body">';
                            html += '<div class="mb-2"><strong>JsonWebKey</strong></div>';
                            html += `<div class="font-monospace small text-break">${header.kid}</div>`;
                            html += '<div class="mt-3">';
                            html += `<a href="https://dev.uniresolver.io/#${header.kid.split('#')[0]}" target="_blank" class="btn btn-sm btn-primary">`;
                            html += '<i class="ti ti-external-link me-1"></i>Resolve Issuer DID</a>';
                            html += '</div></div></div>';
                        }
                    }
                }
            } catch (e) {
                html = '<div class="text-muted">Unable to extract verification method</div>';
            }
        } else {
            if (decodedCredential.proof) {
                const proof = Array.isArray(decodedCredential.proof) ? decodedCredential.proof[0] : decodedCredential.proof;
                
                if (proof.verificationMethod) {
                    const vmType = proof.type || 'DataIntegrityProof';
                    html += '<div class="card bg-light"><div class="card-body">';
                    html += `<div class="mb-2"><strong>${vmType}</strong></div>`;
                    html += `<div class="font-monospace small text-break">${proof.verificationMethod}</div>`;
                    html += '<div class="mt-3">';
                    html += `<a href="https://dev.uniresolver.io/#${proof.verificationMethod.split('#')[0]}" target="_blank" class="btn btn-sm btn-primary">`;
                    html += '<i class="ti ti-external-link me-1"></i>Resolve Issuer DID</a>';
                    html += '</div></div></div>';
                }
            }
        }
        
        if (!html) {
            html = '<div class="text-muted">No verification method specified</div>';
        }
        
        return html;
    }
    
    function renderCredential(credential) {
        let html = '';
        
        // Credential header
        const credTypes = credential.type || [];
        const credTypeArray = Array.isArray(credTypes) ? credTypes : [credTypes];
        const specificType = credTypeArray.find(t => t !== 'VerifiableCredential') || 'Verifiable Credential';
        const formattedType = specificType.replace(/([A-Z])/g, ' $1').trim();
        
        html += `<div class="mb-3"><h3 class="mb-1">${formattedType}</h3>`;
        if (credential.name) html += `<div class="text-muted">${credential.name}</div>`;
        if (credential.validFrom || credential.validUntil) {
            html += '<div class="text-muted small mt-1">';
            if (credential.validFrom) {
                const validFromDate = new Date(credential.validFrom).toLocaleDateString();
                html += `<i class="ti ti-calendar-event me-1"></i>${validFromDate}`;
            }
            if (credential.validUntil) {
                const validUntilDate = new Date(credential.validUntil).toLocaleDateString();
                html += ` — <i class="ti ti-calendar-x me-1"></i>${validUntilDate}`;
            }
            html += '</div>';
        }
        html += '</div>';
        
        // Issuer
        if (credential.issuer) {
            html += renderTopLevelCard('Issued By', credential.issuer, 'ti-user-check');
        }
        
        // Subject
        if (credential.credentialSubject) {
            const subject = Array.isArray(credential.credentialSubject) ? credential.credentialSubject[0] : credential.credentialSubject;
            
            if (subject) {
                const basicInfo = {};
                const objectProperties = {};
                
                for (const [key, value] of Object.entries(subject)) {
                    if (typeof value === 'object' && value !== null && !Array.isArray(value)) {
                        objectProperties[key] = value;
                    } else if (!Array.isArray(value) && key !== 'type') {
                        basicInfo[key] = value;
                    }
                }
                
                if (Object.keys(basicInfo).length > 0) {
                    let cardTitle = 'Credential Subject';
                    if (subject.type) {
                        const types = Array.isArray(subject.type) ? subject.type : [subject.type];
                        const filteredTypes = types.filter(t => t !== 'VerifiableCredential');
                        if (filteredTypes.length > 0) {
                            cardTitle = filteredTypes.map(t => t.replace(/([A-Z])/g, ' $1').trim()).join(', ');
                        }
                    }
                    html += renderTopLevelCard(cardTitle, basicInfo, 'ti-certificate');
                }
                
                for (const [key, value] of Object.entries(objectProperties)) {
                    const displayKey = key.replace(/([A-Z])/g, ' $1').trim();
                    const capitalizedKey = displayKey.charAt(0).toUpperCase() + displayKey.slice(1);
                    html += renderTopLevelCard(capitalizedKey, value, 'ti-box');
                }
                
                for (const [key, value] of Object.entries(subject)) {
                    if (Array.isArray(value) && key !== 'type') {
                        const displayKey = key.replace(/([A-Z])/g, ' $1').trim();
                        const capitalizedKey = displayKey.charAt(0).toUpperCase() + displayKey.slice(1);
                        html += renderTopLevelCard(capitalizedKey, value, 'ti-list');
                    }
                }
            }
        }
        
        return html;
    }
    
    function renderTopLevelCard(title, data, icon = 'ti-info-circle') {
        if (!data) return '';
        
        let html = '<div class="mb-2"><div class="card"><div class="card-header py-2">';
        html += `<h5 class="mb-0"><i class="ti ${icon} me-2"></i>${title}</h5>`;
        html += '</div><div class="card-body py-2">';
        
        if (typeof data === 'object' && !Array.isArray(data)) {
            const keys = Object.keys(data).filter(k => k !== 'type');
            if (keys.length === 1 && typeof data[keys[0]] === 'object' && !Array.isArray(data[keys[0]])) {
                const nestedObj = data[keys[0]];
                html += renderObject(nestedObj, 0);
                
                for (const [key, value] of Object.entries(data)) {
                    if (key === keys[0] || key === 'type') continue;
                    const displayKey = key.replace(/([A-Z])/g, ' $1').trim();
                    const capitalizedKey = displayKey.charAt(0).toUpperCase() + displayKey.slice(1);
                    html += '<div class="mb-1">';
                    html += `<span class="text-muted small"><strong>${capitalizedKey}:</strong></span> `;
                    html += `<span>${value || '-'}</span>`;
                    html += '</div>';
                }
            } else {
                html += renderObject(data, 0);
            }
        } else if (Array.isArray(data)) {
            html += renderArray(data);
        } else {
            html += `<div>${data}</div>`;
        }
        
        html += '</div></div></div>';
        return html;
    }
    
    function renderObject(obj, depth = 0) {
        let html = '';
        const indent = depth > 0 ? 'ps-3' : '';
        
        const keys = Object.keys(obj).filter(k => k !== 'type');
        if (keys.length === 0) return '';
        
        const hasName = obj.name;
        const hasId = obj.id;
        const isDid = hasId && obj.id.startsWith('did:');
        const isHttpUrl = hasId && (obj.id.startsWith('http://') || obj.id.startsWith('https://'));
        
        if (hasName) {
            html += `<div class="mb-1 ${indent}">`;
            if (isHttpUrl) {
                html += `<a href="${obj.id}" target="_blank" class="text-decoration-none fw-bold">${obj.name} <i class="ti ti-external-link ms-1"></i></a>`;
            } else if (isDid) {
                html += `<span class="fw-bold">${obj.name}</span> <a href="https://dev.uniresolver.io/#${obj.id}" target="_blank" class="text-muted" title="Resolve DID"><i class="ti ti-world-www"></i></a>`;
            } else {
                html += `<span class="fw-bold">${obj.name}</span>`;
            }
            html += '</div>';
        }
        
        if (obj.description) {
            html += `<div class="mb-1 ${indent} text-muted">${obj.description}</div>`;
        }
        
        for (const [key, value] of Object.entries(obj)) {
            if (['type', 'name', 'description', 'id'].includes(key)) continue;
            
            const displayKey = key.replace(/([A-Z])/g, ' $1').trim();
            const capitalizedKey = displayKey.charAt(0).toUpperCase() + displayKey.slice(1);
            
            if (typeof value === 'object' && value !== null && !Array.isArray(value)) {
                html += `<div class="mb-2 ${indent}"><div class="border-start border-3 border-primary ps-3">`;
                html += `<div class="text-muted small mb-1"><strong>${capitalizedKey}</strong></div>`;
                html += renderObject(value, depth + 1);
                html += '</div></div>';
            } else if (Array.isArray(value)) {
                html += `<div class="mb-2 ${indent}"><div class="text-muted small mb-1"><strong>${capitalizedKey}</strong></div>`;
                html += renderArray(value);
                html += '</div>';
            } else {
                html += `<div class="mb-1 ${indent}"><span class="text-muted small"><strong>${capitalizedKey}:</strong></span> <span>${value || '-'}</span></div>`;
            }
        }
        
        return html;
    }
    
    function renderArray(arr) {
        if (arr.length === 0) return '<div class="text-muted small">Empty</div>';
        
        const hasObjects = arr.some(item => typeof item === 'object' && item !== null);
        let html = '';
        
        if (hasObjects) {
            arr.forEach((item) => {
                html += '<div class="card bg-light mb-2"><div class="card-body">';
                if (typeof item === 'object') {
                    html += renderObject(item, 0);
                } else {
                    html += `<div>${item}</div>`;
                }
                html += '</div></div>';
            });
        } else {
            html += '<ul class="mb-0">';
            arr.forEach(item => {
                html += `<li>${item}</li>`;
            });
            html += '</ul>';
        }
        
        return html;
    }
    
    window.copyCredentialUrl = function() {
        if (window.currentCredentialUrl) {
            navigator.clipboard.writeText(window.currentCredentialUrl).then(function() {
                showToast('Copied!', 'Credential URL copied to clipboard');
            }).catch(function(err) {
                console.error('Failed to copy: ', err);
                showToast('Error', 'Failed to copy URL');
            });
        }
    }
    
    window.copyCredentialJson = function() {
        if (window.currentCredentialJson) {
            navigator.clipboard.writeText(window.currentCredentialJson).then(function() {
                showToast('Copied!', 'Credential JSON copied to clipboard');
            }).catch(function(err) {
                console.error('Failed to copy: ', err);
                showToast('Error', 'Failed to copy JSON');
            });
        }
    }
    
    window.downloadCredentialJson = function() {
        if (window.currentCredentialOriginalJson && window.currentCredentialId) {
            const blob = new Blob([window.currentCredentialOriginalJson], { type: 'application/json' });
            const url = window.URL.createObjectURL(blob);
            
            const a = document.createElement('a');
            a.href = url;
            a.download = `credential-${window.currentCredentialId}.json`;
            document.body.appendChild(a);
            a.click();
            
            window.URL.revokeObjectURL(url);
            document.body.removeChild(a);
            
            showToast('Downloaded!', 'Credential downloaded successfully');
        }
    }

    window.showToast = function(title, message) {
        const toast = document.createElement('div');
        toast.className = 'toast show position-fixed top-0 end-0 m-3';
        toast.style.zIndex = '9999';
        toast.innerHTML = `
            <div class="toast-header">
                <i class="ti ti-check text-success me-2"></i>
                <strong class="me-auto">${title}</strong>
                <button type="button" class="btn-close" data-bs-dismiss="toast"></button>
            </div>
            <div class="toast-body">
                ${message}
            </div>
        `;
        document.body.appendChild(toast);
        
        setTimeout(() => {
            if (toast.parentNode) {
                toast.parentNode.removeChild(toast);
            }
        }, 3000);
    }

    const advancedTable = {
        headers: [
            { "data-sort": "sort-type", name: "Type" },
            { "data-sort": "sort-issuer", name: "Issuer" },
            { "data-sort": "sort-subject", name: "Subject" },
        ],
    };

    window.tabler_list = window.tabler_list || {};
    document.addEventListener("DOMContentLoaded", function () {
        const list = (window.tabler_list["advanced-table"] = new List("advanced-table", {
            sortClass: "table-sort",
            listClass: "table-tbody",
            valueNames: advancedTable.headers.map((header) => header["data-sort"]),
        }));
    });
{% endraw %}
</script>